<?xml version="1.0" encoding="UTF-8"?>
<project name="ant-build-commons-extensions-scm-git" basedir=".">

    <description>
        This build file contains all targets related to the Subversion source
        control management systems.
    </description>

    <!--
        Load default extension settings.
    -->
    <property file="${commons:resourcedir}/extensions/scm-git/scm-git.properties" />

    <!--
        Displays the help text for this build commons extension.
    -->
    <target name="scm:git:help">
        <echo taskname="help">
The scm:git extension provides a Git specific implementation for the generic scm
extension.
&#x00A0;
scm:git:help
  Displays the help text for the scm:git extension.
&#x00A0;
scm:git:commit
  Will commit and push a specified file or directory to the main repository.
&#x00A0;
scm:git:update
  Performs a full update on the current project and all embedded sub modules,
  similar to Subversion's svn:externals.
&#x00A0;
scm:git:update-light
  Performs a light update of the project source code without any embedded sub
  modules.
&#x00A0;
scm:git:tag
  This target will create a new tag for the current version of the software.
        </echo>
    </target>

    <!--
        Will commit and push a specified file or directory to the main repository.

        Parameters:
            - ${scm.message}
            - ${scm.resource}
    -->
    <target name="scm:git:commit"
            depends="-scm:git:is-checkout"
            if="-scm:git:out-checkout"
            extensionOf="-scm:commit~hook">

        <antcall target="-scm:git:commit" />
    </target>

    <!--
        Will commit and push a specified file or directory to the main repository.

        Parameters:
            - ${scm.message}
            - ${scm.resource}
    -->
    <target name="-scm:git:commit"
            depends="-scm:git:commit-before~hook,
                     -scm:git:commit-main,
                     -scm:git:commit-after~hook" />

    <!--
        Will commit and push a specified file or directory to the main repository.

        Parameters:
            - ${scm.message}
            - ${scm.resource}
    -->
    <target name="-scm:git:commit-main">
        <exec dir="${basedir}" executable="${scm-git.executable}">
            <arg value="commit" />
            <arg value="-m" />
            <arg value="${scm.message}" />
            <arg file="${scm.resource}" />
        </exec>

        <antcall target="-scm:git:pull" />
        <antcall target="-scm:git:push" />
    </target>

    <target name="scm:git:update"
            depends="-scm:git:is-checkout"
            if="-scm:git:out-checkout"
            extensionOf="-scm:update~hook">

        <antcall target="-scm:git:update" />
    </target>

    <target name="scm:git:update-light"
            depends="-scm:git:is-checkout"
            if="-scm:git:out-checkout"
            extensionOf="-scm:update-light~hook">

        <antcall target="-scm:git:update-light" />
    </target>

    <target name="-scm:git:update"
            depends="-scm:git:update-before~hook,
                     -scm:git:update-module,
                     -scm:git:update-submodules,
                     -scm:git:update-after~hook" />

    <target name="-scm:git:update-light"
            depends="-scm:git:update-light-before~hook,
                     -scm:git:update-module,
                     -scm:git:update-light-after~hook" />

    <target name="-scm:git:update-module">
        <exec dir="${basedir}" executable="${scm-git.executable}">
            <arg line="pull" />
        </exec>
    </target>

    <target name="-scm:git:update-submodules">
        <exec dir="${basedir}" executable="${scm-git.executable}" failonerror="false">
            <arg value="submodule" />
            <arg value="foreach" />
            <arg value="--recursive" />
            <arg value="git pull" />
        </exec>
    </target>

    <!--
        Sets a tag for the current software configuration and pushes it to the
        remote repository.

        Parameters:
            ${-scm:tag-label}
    -->
    <target name="scm:git:tag"
            depends="-scm:git:is-checkout"
            if="-scm:git:out-checkout"
            extensionOf="-scm:tag~hook">

        <antcall target="-scm:git:tag" />
    </target>

    <!--
        Sets a tag for the current software configuration and pushes it to the
        remote repository.

        Parameters:
            ${-scm:tag-label}
    -->
    <target name="-scm:git:tag"
            depends="-scm:git:tag-before~hook,
                     -scm:git:tag-main,
                     -scm:git:tag-after~hook" />

    <!--
        Sets a tag for the current software configuration and pushes it to the
        remote repository.

        Parameters:
            ${-scm:tag-label}
    -->
    <target name="-scm:git:tag-main">
        <exec dir="${basedir}" executable="${scm-git.executable}">
            <arg line="tag" />
            <arg line="${-scm:tag-label}" />
        </exec>

        <exec dir="${basedir}" executable="${scm-git.executable}">
            <arg line="push" />
            <arg line="${scm.git.remote}" />
            <arg line="--tags" />
        </exec>
    </target>

    <!--
        Pulls all changes from the git repository
    -->
    <target name="-scm:git:pull">
        <exec dir="${basedir}" executable="${scm-git.executable}">
            <arg value="pull" />
        </exec>
    </target>

    <!--
        Pushes all local changes to the git remote repository.
    -->
    <target name="-scm:git:push">
        <exec dir="${basedir}" executable="${scm-git.executable}">
            <arg value="push" />
        </exec>
    </target>

    <!--
        Checks if the current project is a git checkout.
    -->
    <target name="-scm:git:is-checkout">
        <available file="${basedir}/.git" property="-scm:git:out-checkout" />
    </target>

    <!-- Extension points provided by this module. -->

    <!--
        This extension point will be called before a change will be committed
        and pushed.
    -->
    <extension-point name="-scm:git:commit-before~hook" />

    <!--
        This extension point will be called after a change was committed
        and pushed.
    -->
    <extension-point name="-scm:git:commit-after~hook" />

    <extension-point name="-scm:git:update-before~hook" />

    <extension-point name="-scm:git:update-after~hook" />

    <extension-point name="-scm:git:update-light-before~hook" />

    <extension-point name="-scm:git:update-light-after~hook" />

    <extension-point name="-scm:git:tag-before~hook" />

    <extension-point name="-scm:git:tag-after~hook" />
    
</project>
