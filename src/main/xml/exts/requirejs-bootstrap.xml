<?xml version="1.0" encoding="UTF-8"?>
<project name="ant-build-commons-extensions-requirejs-bootstrap" basedir=".">
    <!--
        Import utilized extensions
    -->
    <import file="enabled.xml" />
    <import file="availability.xml" />

    <!--
         External entrypoint to this module
    -->
    <target name="requirejs:bootstrap"
            depends="availability:js-srcdir-is-available"
            if="availability:js-srcdir-is-available">
        <common.enabled.antcall target="-requirejs:bootstrap"
                                property="requirejs.bootstrap.enabled" />
    </target>

    <!--
         Internal entrypoint to the module
    -->
    <target name="-requirejs:bootstrap"
            depends="-requirejs:initialize,
                     -requirejs:bootstrap:before~hook,
                     -requirejs:bootstrap:run,
                     -requirejs:bootstrap:after~hook" />

    <!--
         Build the needed bootstrapping file

         The file contains the requirejs library, all defined loaders as well
         as an initial request to the application entrypoint file
    -->
    <target name="-requirejs:bootstrap:run"
            depends="-requirejs:create-bootstrap-path,
                     -requirejs:bootstrap:combine-requirejs-and-loaders,
                     -requirejs:bootstrap:create-runtime-configuration">
        <concat destfile="${-requirejs:out-bootstrap-path}">
            <file file="${-requirejs:bootstrap:out-combined-requirejs-and-loaders}" />
            <string value="${-requirejs:bootstrap:out-runtime-configuration}" />
            <string value="require(['/${requirejs.entrypoint}']);" />
        </concat>
    </target>

    <!--
        Create the needed runtime configuration for requirejs to load our
        javascript files properly. This configuration does mainly consist of
        the baseUrl, which is extracted from the given entrypoint.
    -->
    <target name="-requirejs:bootstrap:create-runtime-configuration">
        <commons.script language="javascript" setbeans="false"><![CDATA[
            var entrypointDirectory = new java.io.File(
                project.getProperty('requirejs.entrypoint')
            ).getParent();

            var baseUrl = "/";
            if (entrypointDirectory !== null) {
                baseUrl = "/" + entrypointDirectory;
            }

            project.setProperty(
                '-requirejs:bootstrap:out-runtime-configuration',
                'require.config({baseUrl: "' + baseUrl + '"});'
            );
        ]]></commons.script>
    </target>

    <!--
         Build a combined version of the requirejs library as well as all
         defined loaders.

         Dependencies will be resolved and remapped to proper naming,
         eventhough the loaders may reside at an arbitrary position
    -->
    <target name="-requirejs:bootstrap:combine-requirejs-and-loaders"
            depends="-requirejs:bootstrap:create-build-js">
        <commons.rhino failonerror="true">
            <arg value="${resourcedir}/extensions/requirejs/r.js" />
            <arg value="-o" />
            <arg value="${-requirejs:bootstrap:out-build-js}" />
        </commons.rhino>
    </target>

    <!--
         Generate the ´include´ and ´paths´ contents for the build
         configuration file, which is sent to r.js for correct resolvement of
         loader and requirejs dependencies

         The output is in JSON format

        @param -requirejs:bootstrap:out-build-config-paths
        @param -requirejs:bootstrap:out-build-config-includes
    -->
    <target name="-requirejs:bootstrap:create-build-config-paths-and-include"
            depends="-requirejs:bootstrap:create-bootstrap-config-paths-and-include-append,
                     -requirejs:bootstrap:create-bootstrap-config-paths-and-include-no-append" />

    <target name="-requirejs:bootstrap:create-bootstrap-config-paths-and-include-append"
            if="-requirejs:build-config-loader-includes">
        <property name="-requirejs:bootstrap:out-build-config-paths"
                  value="&quot;requireJS&quot;: &quot;${-requirejs.library.module}&quot;,${-requirejs:build-config-loader-paths}" />
        <property name="-requirejs:bootstrap:out-build-config-includes"
                value="&quot;requireJS&quot;,${-requirejs:build-config-loader-includes}" />
    </target>

    <target name="-requirejs:bootstrap:create-bootstrap-config-paths-and-include-no-append"
            unless="-requirejs:build-config-loader-includes">
        <property name="-requirejs:bootstrap:out-build-config-paths"
                  value="&quot;requireJS&quot;:&quot;${-requirejs.library.module}&quot;" />
        <property name="-requirejs:bootstrap:out-build-config-includes"
                  value="&quot;requireJS&quot;" />
    </target>

    <!--
         Create the necessary build file, which is used by r.js to create the
         needed bootstrapping file with all dependencies handled properly

         The path of the buildfile as well as the path of the file which will
         be generated, if the buildfile is executed is returned.

         @param -requirejs:bootstrap:out-build-js
         @param -requirejs:bootstrap:out-combined-requirejs-and-loaders
    -->
    <target name="-requirejs:bootstrap:create-build-js"
            depends="-requirejs:bootstrap:create-build-config-paths-and-include">
        <tempfile destdir="${commons:tmpdir}" property="-requirejs:bootstrap:out-build-js" prefix="requirejs" deleteonexit="false" />
        <tempfile destdir="${commons:tmpdir}" property="-requirejs:bootstrap:out-combined-requirejs-and-loaders" prefix="requirejs" deleteonexit="false" />
        <copy file="${requirejs.bootstrap.config}"
            tofile="${-requirejs:bootstrap:out-build-js}">
            <filterset>
                <filter token="DynamicBuildPaths" value="${-requirejs:bootstrap:out-build-config-paths}" />
                <filter token="EnforcedIncludes" value="${-requirejs:bootstrap:out-build-config-includes}" />
                <filter token="DynamicOutputPath" value="${-requirejs:bootstrap:out-combined-requirejs-and-loaders}" />
            </filterset>
        </copy>
    </target>

    <!--
         Extension points of the requirejs:bootstrap module
    -->
    <extension-point name="-requirejs:bootstrap:before~hook" />
    <extension-point name="-requirejs:bootstrap:after~hook" />

    <!--
         Hook this module into the build-process, by executing it after the
         compile step
    -->
    <target name="-requirejs:bootstrap:compile:after~hooked"
            depends="requirejs:bootstrap"
            extensionOf="-compile:after~hook" />

</project>
