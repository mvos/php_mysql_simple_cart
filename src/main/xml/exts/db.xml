<?xml version="1.0" encoding="UTF-8"?>
<project name="ant-build-commons-extensions-db" basedir=".">

    <!--
        Import default properties for this extension.
    -->
    <property file="${resourcedir}/extensions/db/db.properties" />

    <!--
        Import sub extensions
    -->
    <import file="db-mysql.xml" />

    <target name="db:help">
        <echo taskname="help">
db:initialize
  Creates the initial database schema for the current project and the configured
  RDBMS.
&#x00A0;
To make the database related targets work, the following properties must be
configured:
&#x00A0;
  - $${db.system}   (Default: mysql)
  - $${db.driver}   (Default: com.mysql.jdbc.Driver)
  - $${db.hostname} (Default: localhost)
  - $${db.name}     (Mandatory)
        </echo>
    </target>

    <!--
        Initializes the project database if the current configuration contains
        the
    -->
    <target name="db:initialize"
            depends="-db:is-enabled,initialize:environment"
            if ="-db:enabled">

        <antcall target="-db:initialize" inheritAll="false">
            <param file="${commons:env.properties.file}" />
        </antcall>
    </target>

    <!--
        Meta target that defines the build order.
    -->
    <target name="-db:initialize"
            depends="-db:initialize-before~hook,
                     -db:initialize-database,
                     -db:initialize-schema,
                     -db:initialize-after~hook" />

    <!--
        Creates the initial database.
    -->
    <target name="-db:initialize-database"
            depends="-db:mysql:initialize-database" />

    <!--
        Initializes the project database from a schema file
    -->
    <target name="-db:initialize-schema"
            depends="-db:is-schema-defined"
            if="-db:schema-defined">

        <antcall target="-db:mysql:initialize-schema" />
    </target>

    <!--
        Drops the project's database.
    -->
    <target name="db:drop"
            depends="-db:is-enabled,initialize:environment"
            if ="-db:enabled">

        <antcall target="-db:drop" inheritAll="false">
            <param file="${commons:env.properties.file}" />
        </antcall>
    </target>

    <!--
        Drops the project's database.
    -->
    <target name="-db:drop"
            depends="-db:drop-before~hook,
                     -db:drop-main~hook,
                     -db:drop-after~hook" />

    <!--
        Resets the project's database schema to it's initial state.
    -->
    <target name="db:reset"
            depends="-db:is-enabled,initialize:environment"
            if ="-db:enabled">

        <antcall target="-db:reset" inheritAll="false">
            <param file="${commons:env.properties.file}" />
        </antcall>
    </target>

    <target name="-db:reset"
            depends="-db:reset-before~hook,
                     -db:drop,
                     -db:initialize,
                     -db:reset-after~hook" />

    <!--
        Tests if the database extension is enabled.
    -->
    <target name="-db:is-enabled">
        <condition property="-db:enabled">
            <and>
                <isset property="db.system" />
                <isset property="db.driver" />
                <isset property="db.hostname" />
                <isset property="db.name" />
            </and>
        </condition>
    </target>

    <!--
        Tests if the project configuration defines a schema file.
    -->
    <target name="-db:is-schema-defined">
        <condition property="-db:schema-defined">
            <available file="${db.schema.file}" />
        </condition>
    </target>

    <!--
        Utilized extension points
    -->

    <!--
        Hook into the initialize build step and generate the system database if
        the current project uses a database.
    -->
    <target name="-db:initialize:main~hooked"
            depends="db:initialize"
            extensionOf="-initialize:main~hook" />

    <!--
        Hook into the install build step and generate the system database if the
        current project uses a database.
    -->
    <target name="-db:install:after~hooked"
            depends="db:initialize"
            extensionOf="-install:after~hook" />

    <!--
        Extension points provided by this build extension.
    -->

    <extension-point name="-db:initialize-before~hook" />

    <extension-point name="-db:initialize-after~hook" />

    <extension-point name="-db:drop-before~hook" />

    <extension-point name="-db:drop-main~hook" />

    <extension-point name="-db:drop-after~hook" />

    <extension-point name="-db:reset-before~hook" />

    <extension-point name="-db:reset-after~hook" />

</project>
