<?xml version="1.0" encoding="UTF-8"?>
<!--
    This build file contains all targets for the JSTestDriver extension package. So
    that you can use JSTestDriver without any trouble in your project.

    @TODO: Generate code coverage information
    @TODO: Generate client config
-->
<project name="ant-build-commons-extensions-jstestdriver" basedir=".">

    <!--
        Import default properties for this extension.
    -->
    <property file="${resourcedir}/extensions/jstestdriver/jstestdriver.properties" />

    <!--
        Import utilized extensions
    -->
    <import file="enabled.xml" />
    <import file="availability.xml" />

    <!--
        Shortcut for the "jstestdriver:jstestdriver" target.
    -->
    <target name="jstestdriver" depends="jstestdriver:jstestdriver" />
    
    <!--
        This target will run all tests for the current project.

        Parameters:
            ${in.jstestdriver.coverage}     Optional boolean flag that enables the
                                       collection of code coverage data.
            $in.jstestdriver.config}        Path to the configuration fo
                                       JSTestDriver, usually it will be autogenerated.
    -->
    <target name="jstestdriver:jstestdriver"
            depends="availability:js-testdir-is-available"
            if="availability:js-testdir-is-available">
        <common.enabled.antcall target="-jstestdriver:run"
                                property="jstestdriver.enabled">
            <param name="in.jstestdriver.coverage" value="${in.jstestdriver.coverage}" />
            <param name="in.jstestdriver.config"   value="${in.jstestdriver.config}" />
        </common.enabled.antcall>
    </target>

    <!--
        Start JSTestDriver server and browser (blocking)
    -->
    <target name="jstestdriver:server">
        <echo>Starting JSTestDriver server now</echo>
        <java jar="${jstestdriver.runtime}" fork="true">
            <arg value="--runnerMode" />
            <arg value="INFO" />
            <arg value="--port" />
            <arg value="${jstestdriver.port}" />
            <arg value="--browser" />
            <arg value="${jstestdriver.browser}" />
        </java>
    </target>

    <!--
        This target executes the project's test suite and enables the collection
        of code coverage information.

        Parameters:
            $in.jstestdriver.config}        Path to the configuration fo
                                       JSTestDriver, usually it will be autogenerated.
    -->
    <target name="jstestdriver:coverage"
            depends="availability:js-testdir-is-available"
            if="availability:js-testdir-is-available">
        <common.enabled.antcall target="-jstestdriver:run"
                                property="jstestdriver.enabled">
            <param name="in.jstestdriver.coverage" value="true" />
            <param name="in.jstestdriver.config"   value="${in.jstestdriver.config}" />
        </common.enabled.antcall>
    </target>

    <target name="-jstestdriver:run"
            depends="-jstestdriver:check-or-generate-testconfig,
                     -jstestdriver:check-server,
                     -jstestdriver:run-testconfig-full,
                     -jstestdriver:run-testconfig-client" />

    <target name="-jstestdriver:run-testconfig-client"
            if="-jstestdriver:server-running">

        <java
            jar="${jstestdriver.runtime}"
            fork="true"
            failonerror="true">
            <arg value="--config" />
            <arg value="${jstestdriver.config}" />
            <arg value="--tests" />
            <arg value="all" />
        </java>
    </target>

    <target name="-jstestdriver:run-testconfig-full"
            unless="-jstestdriver:server-running">

        <antcall target="-jstestdriver:run-testconfig-full-fork" inheritAll="true" />
        <antcall target="-jstestdriver:run-testconfig-full-headless" inheritAll="true" />
    </target>

    <target name="-jstestdriver:run-testconfig-full-fork" unless="headless">
        <java jar="${jstestdriver.runtime}"
              fork="true"
              failonerror="true">
            <arg value="--port" />
            <arg value="${jstestdriver.port}" />
            <arg value="--browser" />
            <arg value="${jstestdriver.browser}" />
            <arg value="--config" />
            <arg value="${jstestdriver.config}" />
            <arg value="--tests" />
            <arg value="all" />
        </java>
    </target>

    <target name="-jstestdriver:run-testconfig-full-headless" if="headless">
        <exec executable="${resourcedir}/extensions/jstestdriver/jstestdriver-headless.sh">
            <arg value="${jstestdriver.runtime}" />
            <arg value="${commons:logsdir}" />
            <arg value="${jstestdriver.port}" />
            <arg value="${jstestdriver.browser}" />
            <arg value="${jstestdriver.config}" />
        </exec>
    </target>

    <target name="-jstestdriver:check-server">
        <condition property="-jstestdriver:server-running">
            <socket server="localhost" port="${jstestdriver.port}"/>
        </condition>
    </target>

    <target name="-jstestdriver:check-or-generate-testconfig">
        <!-- TODO: mapi! -->
    </target>

    <!--
         Hook jstestdriver into the main testing step
    -->
    <target name="-jstestdriver:test:main~hooked"
            depends="jstestdriver:jstestdriver"
            extensionOf="-test:main~hook" />

</project>
