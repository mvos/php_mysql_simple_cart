<?xml version="1.0" encoding="UTF-8"?>
<!--
    This build file contains common targets for handling pear and pear package
    related tasks.
-->
<project name="ant-build-commons-extensions-pear" basedir=".">

    <!--
        Import default settings
    -->
    <property file="${resourcedir}/extensions/pear/pear.properties" />

    <!--
        Defines the default include path for the project's local pear
        installation.
    -->
    <pathconvert property="pear.local.include.path">
        <path path="." />
        <path path="${pear.local.phpdir}" />
    </pathconvert>

    <!--
        Displays the help text for this build extension.
    -->
    <target name="pear:help">
        <echo taskname="help">
The pear extension provides a large set of build targets that can
be used to interact with PEAR repositories and to develop components
that utilize PEAR as distribution channel.
&#x00A0;
changes:help
  Displays the help text for the pear build extension.
&#x00A0;
pear:manifest
  Updates a package manifest with contents found in the current
  working directory.
&#x00A0;
    - $${pear.manifest.file}     (Mandatory)
        </echo>
    </target>

    <!--
        This target will update a given package.xml manifest with the contents
        found in the context directory and all sub directories.

        Parameters:
          ${pear.manifest.file} Location of the package.xml manifest
    -->
    <target name="pear:manifest"
            depends="-pear:manifest-before~hook,
                     -pear:manifest,
                     -pear:manifest-after~hook" />

    <!--
        This target will update a given package.xml manifest with the contents
        found in the context directory and all sub directories.

        Parameters:
          ${pear.manifest.file} Location of the package.xml manifest
    -->
    <target name="-pear:manifest">
        <exec executable="${commons.executable.php}" failonerror="true">
            <arg value="${pear.update.executable}" />
            <arg value="${pear.manifest.file}" />
        </exec>
    </target>

    <!--
        This method will initialize a fresh pear root directory
    -->
    <target name="pear:initialize">
        <antcall target="-pear:lock-release" />
        <antcall target="-pear:initialize-or-ignore">
            <param name="-pear:in-root" location="${pear.local.basedir}" />
            <param name="-pear:in-conf" location="${pear.local.conffile}" />
            <param name="-pear:in-state"   value="${pear.local.preferred.state}" />
        </antcall>
        <antcall target="-pear:lock-release" />
    </target>

    <!--
        Parameters:
            ${in.pear.package.name}
            ${in.pear.package.channel}
    -->
    <target name="pear:install" depends="pear:channel-discover">
        <antcall target="-pear:lock-acquire" />
        <antcall target="-pear:install">
            <param name="-pear:in-conf"      location="${pear.local.conffile}" />
            <param name="-pear:in-channel-uri"  value="${in.pear.package.channel}" />
            <param name="-pear:in-package-name" value="${in.pear.package.name}" />
        </antcall>
        <antcall target="-pear:lock-release" />

        <antcall target="-pear:set-up2date" />
    </target>

    <!--
        Parameters:
            ${in.pear.package.name}
            ${in.pear.package.channel}
    -->
    <target name="pear:upgrade"
            unless="-pear:out-up2date"
            depends="-pear:is-up2date">

        <antcall target="-pear:lock-acquire" />
        <antcall target="-pear:upgrade">
            <param name="-pear:in-conf"      location="${pear.local.conffile}" />
            <param name="-pear:in-channel-uri"  value="${in.pear.package.channel}" />
            <param name="-pear:in-package-name" value="${in.pear.package.name}" />
        </antcall>
        <antcall target="-pear:lock-release" />
        
        <antcall target="-pear:set-up2date" />
    </target>

    <!--
        This target will discover the given ${in.pear.package.channel} in the
        local pear installation.

        Parameters:
            ${in.pear.package.channel}  Uri of a pear channel.
    -->
    <target name="pear:channel-discover" depends="pear:initialize">
        <antcall target="-pear:lock-acquire" />
        <antcall target="-pear:channel-discover">
            <param name="-pear:in-channel-uri" value="${in.pear.package.channel}" />
            <param name="-pear:in-conf"     location="${pear.local.conffile}" />
        </antcall>
        <antcall target="-pear:lock-release" />
    </target>

    <!--
        Discovers a pear channel specified as parameter.

        Parameters
          ${project.pear.uri}
    -->
    <target name="common-pear-channel-discover" depends="-common-pear-prepare">
        <antcall target="-pear:channel-discover">
            <param name="-pear:in-channel-uri" value="${project.pear.uri}" />
            <param name="-pear:in-conf" location="${common-pear-config}" />
        </antcall>
    </target>

    <!--
        Installs a remote pear package.

        Parameters
          ${pear-package}
    -->
    <target name="common-pear-install-remote" depends="-common-pear-prepare">
        <exec executable="${commons.executable.php}" failonerror="true">
            <arg value="-d" />
            <arg value="include_path=${pear.local.include.path}" />
            <arg value="${pear.executable}" />
            <arg value="-c" />
            <arg value="${common-pear-config}" />
            <arg value="install" />
            <arg value="--alldeps" />
            <arg value="--loose" />
            <arg value="--nobuild" />
            <arg value="${pear-package}" />
        </exec>
    </target>

    <!--
        Installs a local pear package.

        Parameters
          ${pear-package-pattern}
    -->
    <target name="common-pear-install-local" depends="-common-pear-prepare">
        <apply executable="${commons.executable.php}" failonerror="true">
            <arg value="-d" />
            <arg value="include_path=${pear.local.include.path}" />
            <arg value="${pear.executable}" />
            <arg value="-c" />
            <arg value="${common-pear-config}" />
            <arg value="install" />
            <arg value="--force" />
            <arg value="--alldeps" />
            <arg value="--loose" />
            <arg value="--nobuild" />
            <fileset dir="${commons:distdir}">
                <include name="*-${build.version.release}.tgz" />
            </fileset>
        </apply>
    </target>

    <!--
        Creates a temporary pear environment and defines a few properties
        required by most pear related targets:

        Properties:
          ${common-pear-base-dir}  The pear root directory.
          ${common-pear-bin-dir}   The pear binary directory.
          ${common-pear-root-dir}  The pear library install directory.
          ${common-pear-config}    The pear configuration file.
    -->
    <target name="-common-pear-prepare"
            depends="-common-pear-prepare-properties,
                     -common-pear-prepare-test-exists,
                     -common-pear-prepare-if-not-exists" />

    <!--
        Defines a few properties required by most pear related targets:

        Properties:
          ${common-pear-base-dir}  The pear root directory.
          ${common-pear-bin-dir}   The pear binary directory.
          ${common-pear-root-dir}  The pear library install directory.
          ${common-pear-config}    The pear configuration file.
    -->
    <target name="-common-pear-prepare-properties">
        <property name="common-pear-base-dir" value="${commons:builddir}/pear" />
        <property name="common-pear-bin-dir" value="${common-pear-base-dir}/pear" />
        <property name="common-pear-root-dir" value="${common-pear-bin-dir}/php" />
        <property name="common-pear-config" value="${common-pear-base-dir}/.pearrc" />
    </target>

    <!--
        Checks if the temporary pear environment already exists. If it exists
        this target will set the ${common-pear-prepare-exists} property.
    -->
    <target name="-common-pear-prepare-test-exists">
        <available file="${common-pear-config}" property="common-pear-prepare-exists" />
    </target>

    <!--
        Creates a temporary pear environment and defines two properties required
        by most pear related targets:
    -->
    <target name="-common-pear-prepare-if-not-exists" unless="common-pear-prepare-exists">
        <antcall target="-pear:initialize">
            <param name="-pear:in-root" location="${common-pear-base-dir}" />
            <param name="-pear:in-conf" location="${common-pear-config}" />
            <param name="-pear:in-state"   value="alpha" />
        </antcall>
    </target>

    <!--
        Initializes an existing local pear installation for the current project
        or it keeos an already existing installation.

        Parameters:
            ${-pear:in-root}   The pear root directory.
            ${-pear:in-conf}   The pear main config file
            ${-pear:in-state}  The preferred package state
    -->
    <target name="-pear:initialize-or-ignore"
            depends="-pear:is-initialized,
                     -pear:initialize" />

    <!--
        Tests if the project related pear installation is already initialized
        and sets the property ${-pear:out-initialized}.

        Parameters:
            ${-pear:in-root} The pear root directory.
            ${-pear:in-conf} The pear main config file

        Defines:
            ${-pear:out-initialized} Will be set if the given pear root directory
                                     and config file already exists.
    -->
    <target name="-pear:is-initialized">
        <condition property="-pear:out-initialized">
            <and>
                <available file="${-pear:in-root}" />
                <available file="${-pear:in-conf}" />
            </and>
        </condition>
    </target>

    <!--
        Initializes an fresh pear root directory.

        Parameters:
            ${-pear:in-root}  The pear root directory.
            ${-pear:in-conf}  The pear main config file
            ${-pear:in-state} The preferred package state
    -->
    <target name="-pear:initialize" unless="-pear:out-initialized">
        <mkdir dir="${-pear:in-root}" />

        <exec executable="${commons.executable.php}" failonerror="true">
            <arg value="-d" />
            <arg value="include_path=${pear.local.include.path}" />
            <arg value="${pear.executable}" />
            <arg value="config-create" />
            <arg value="${-pear:in-root}" />
            <arg value="${-pear:in-conf}" />
        </exec>

        <exec executable="${commons.executable.php}" failonerror="true">
            <arg value="-d" />
            <arg value="include_path=${pear.local.include.path}" />
            <arg value="${pear.executable}" />
            <arg value="-c" />
            <arg value="${-pear:in-conf}" />
            <arg value="config-set" />
            <arg value="preferred_state" />
            <arg value="${-pear:in-state}" />
        </exec>

        <exec executable="${commons.executable.php}" failonerror="true">
            <arg value="-d" />
            <arg value="include_path=${pear.local.include.path}" />
            <arg value="${pear.executable}" />
            <arg value="-c" />
            <arg value="${-pear:in-conf}" />
            <arg value="config-set" />
            <arg value="auto_discover" />
            <arg value="1" />
        </exec>

        <antcall target="-pear:install">
            <param name="-pear:in-channel-uri" value="pear.php.net" />
            <param name="-pear:in-package-name" value="pear" />
        </antcall>
    </target>

    <!--
        Will discover a pear channel.

        Parameters:
            ${-pear:in-conf}        The pear main configuration file.
            ${-pear:in-channel-uri} The pear channel uri.
    -->
    <target name="-pear:channel-discover">
        <!-- First try to delete a previous discovered channel -->
        <exec executable="${commons.executable.php}">
            <arg value="-d" />
            <arg value="include_path=${pear.local.include.path}" />
            <arg value="${pear.executable}" />
            <arg value="-c" />
            <arg value="${-pear:in-conf}" />
            <arg value="channel-delete" />
            <arg value="${-pear:in-channel-uri}" />
        </exec>

        <exec executable="${commons.executable.php}">
            <arg value="-d" />
            <arg value="include_path=${pear.local.include.path}" />
            <arg value="${pear.executable}" />
            <arg value="-c" />
            <arg value="${-pear:in-conf}" />
            <arg value="channel-discover" />
            <arg value="${-pear:in-channel-uri}" />
        </exec>
    </target>

    <!--
        Installs a package with all it's dependencies in the project's local
        pear installation.

        Parameters:
            ${-pear:in-conf}         The pear main configuration file.
            ${-pear:in-channel-uri}  The pear channel uri.
            ${-pear:in-package-name} Name of the pear package with optional version number.
    -->
    <target name="-pear:install">
        <exec executable="${commons.executable.php}" errorproperty="~pear:install-error-result">
            <arg value="-d" />
            <arg value="include_path=${pear.local.include.path}" />
            <arg value="${pear.executable}" />
            <arg value="-c" />
            <arg value="${-pear:in-conf}" />
            <arg value="install" />
            <arg value="--alldeps" />
            <arg value="--nobuild" />
            <arg value="--force" />
            <arg value="${-pear:in-channel-uri}/${-pear:in-package-name}" />
        </exec>

        <antcall target="commons:fail-build-on-error">
            <param name="commons:in-error-result" value="${~pear:install-error-result}" />
        </antcall>
    </target>

    <!--
        Upgrades an existing pear package in the pear installation of the
        current project.

        Parameters:
            ${-pear:in-conf}         The pear main configuration file.
            ${-pear:in-channel-uri}  The pear channel uri.
            ${-pear:in-package-name} Name of the pear package with optional version number.
    -->
    <target name="-pear:upgrade">
        <exec executable="${commons.executable.php}" errorproperty="~pear:upgrade-error-result">
            <arg value="-d" />
            <arg value="include_path=${pear.local.include.path}" />
            <arg value="${pear.executable}" />
            <arg value="-c" />
            <arg value="${-pear:in-conf}" />
            <arg value="upgrade" />
            <arg value="--alldeps" />
            <arg value="${-pear:in-channel-uri}/${-pear:in-package-name}" />
        </exec>

        <antcall target="commons:fail-build-on-error">
            <param name="commons:in-error-result" value="${~pear:upgrade-error-result}" />
        </antcall>
    </target>

    <!--
        Tests if the local PEAR installation is up2date. This up2date check uses
        the ${pear.local.update.file} property to determine the next update time.
    -->
    <target name="-pear:is-up2date">
        <tstamp>
            <format property="-pear:last-touch-time"
                    pattern="MM/dd/yyyy kk:mm:ss"
                    offset="${pear.local.update.interval}"
                    unit="hour" />
        </tstamp>
        <condition property="-pear:out-up2date">
            <and>
                <available file="${pear.local.update.file}" />
                <islastmodified pattern="MM/dd/yyyy kk:mm:ss"
                                datetime="${-pear:last-touch-time}"
                                mode="after">
                    <file file="${pear.local.update.file}" />
                </islastmodified>
            </and>
        </condition>
    </target>

    <!--
        Flags the local PEAR installation as up2date.
    -->
    <target name="-pear:set-up2date">
        <touch file="${pear.local.update.file}" />
    </target>

    <!--
        Acquires a lock for the local pear installation.
    -->
    <target name="-pear:lock-acquire">
        <waitfor>
            <not>
                <available file="${pear.local.lockfile}" />
            </not>
        </waitfor>
    </target>

    <!--
        Releases a lock on the local pear installation.
    -->
    <target name="-pear:lock-release">
        <delete file="${pear.local.lockfile}" failonerror="false" />
    </target>

    <!--
        This target will install a local version of the given package in the
        project's pear installation, so that we can use it in the project. If
        the package is already installed, this target will perform an upgrade of
        the package.

        Parameters:
            ${in.pear.package.file}    A file from the package that will be used to
                                       check if the package is already installed.
            ${in.pear.package.name}    The name of the pear package that should
                                       be installed.
            ${in.pear.package.channel} The pear channel uri, where the requested
                                       package could be found.
    -->
    <target name="-pear:package-install-or-upgrade"
            depends="-pear:package-is-installed,
                     -pear:package-install,
                     -pear:package-upgrade" />

    <target name="-pear:package-install" unless="-pear:package-out-installed">
        <antcall target="pear:install" />
    </target>

    <target name="-pear:package-upgrade" if="-pear:package-out-installed">
        <antcall target="pear:upgrade" />
    </target>

    <!--
        Tests if phpunit is already installed and sets the a property named
        ${-pear:package-out-installed} to true if it exists.

        Parameters:
            ${in.pear.package.file}    A file from the package that will be used to
                                       check if the package is already installed.

        Defines:
            ${-pear:package-out-installed} If phpunit is already installed locally.
    -->
    <target name="-pear:package-is-installed">
        <condition property="-pear:package-out-installed">
            <available file="${pear.local.bindir}/${in.pear.package.file}" />
        </condition>
    </target>

    <!--
        Defines a property with the absolute path that points to the temporary
        pear source dir.

        Defines:
            ${pear.source.path} - Absolute path to the pear source dir.
    -->
    <target name="-pear:define-source-path"
            depends="-common-pear-prepare-properties">

        <property name="pear.source.path" value="${common-pear-root-dir}" />
    </target>

    <!--
        Tests if the pear package format is enabled for this project.
    -->
    <target name="-pear:is-enabled">
        <condition property="-pear:enabled">
            <and>
                <isset property="project.pear.uri" />
                <not>
                    <equals arg1="pear.example.com" arg2="${project.pear.uri}" />
                </not>
            </and>
        </condition>
    </target>

    <!--
        EXTENSION POINTS UTILIZED BY THIS MODULE
    -->

    <!--
        This build fail extension will remove the pear lock file when the build
        fails.
    -->
    <target name="-pear:release-lock-on-failure~hooked"
            extensionOf="-commons:fail-build-on-error-before~hook">

        <antcall target="-pear:lock-release" />
    </target>

    <!--
        EXTENSION POINTS PROVIDED BY THIS MODULE
    -->

    <!--
        Will be called, right before this module starts to update a package.xml
        file.

        Parameters:
          ${pear.manifest.file} Location of the package.xml manifest
    -->
    <extension-point name="-pear:manifest-before~hook" />

    <!--
        Will be called, after this module has finished the update process of
        a package.xml file.

        Parameters:
          ${pear.manifest.file} Location of the package.xml manifest
    -->
    <extension-point name="-pear:manifest-after~hook" />

</project>
